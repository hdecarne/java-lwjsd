// Plugins
plugins {
	id "de.carne.java-tools" version "0.7.2" apply false
	id "org.sonarqube" version "2.7" apply true
	id "com.jfrog.artifactory" version "4.9.5" apply false
	id "com.jfrog.bintray" version "1.8.4" apply false
}

// Build helpers
def snapshotBuild = project.version.endsWith("-SNAPSHOT")

def resolveProperty(propertyName, envName) {
	def resolved = (project.findProperty(propertyName) ?: System.getenv(envName));

	if(resolved == null) {
		throw new GradleException("Missing property/environment variable: '${propertyName}'/'${envName}'")
	}
	return resolved; 
}

// Projects
subprojects {

	apply plugin: "java-library"
	apply plugin: "de.carne.java-tools"
	apply plugin: "jacoco"
	apply plugin: "maven-publish"
	apply plugin: "eclipse"
	apply plugin: "com.jfrog.artifactory" 
	apply plugin: "com.jfrog.bintray"

	sourceCompatibility = JavaVersion.VERSION_11
	targetCompatibility = JavaVersion.VERSION_11

	repositories {
		if(snapshotBuild) {
			mavenLocal()
			maven { url "https://oss.jfrog.org/libs-snapshot/" }
		}
		jcenter()
		maven { url "https://oss.jfrog.org/libs-release/" }
	}

	dependencies {
		testImplementation(group: "de.carne.common", name: "java-test", version: project.javaTestVersion)
	}

	test {
		useJUnitPlatform()
		testLogging {
			events "started", "failed", "passed", "skipped"
			exceptionFormat "full"
		}
	}

	jacoco {
		toolVersion = "0.8.3"
	}

	jacocoTestReport {
		reports {
			xml.enabled false
			html.enabled true
			html.destination file("${buildDir}/reports/jacoco")
			csv.enabled false
		}
	}

	task sourceJar(type: Jar) {
		from sourceSets.main.allJava
		classifier "sources"
	}

	task javadocJar(type: Jar) {
		from javadoc
		classifier = "javadoc"
	}

	publishing {
		publications {
			Bintray(MavenPublication) {
				from components.java
				artifact sourceJar
				artifact javadocJar
				pom {
					name = project.name
					description = projectDescription
					url = projectUrl
					licenses {
						license {
							name = projectLicense
							url = projectLicenseUrl
							distribution = "repo"
						}
					}
					developers {
						developer {
							id = project.resolveProperty("developerId", "DEVELOPER_ID")
							name = project.resolveProperty("developerName", "DEVELOPER_NAME")
							email = project.resolveProperty("developerEmail", "DEVELOPER_EMAIL")
						}
					}
					scm {
						url = projectScmUrl
					}
				}
			}
		}
	}

	artifactory {
		contextUrl = "https://oss.jfrog.org/artifactory"
		publish {
			repository {
				repoKey = (snapshotBuild ? "oss-snapshot-local" : "oss-release-local")
				username = project.resolveProperty("artifactory_user", "ARTIFACTORY_USER")
				password = project.resolveProperty("artifactory_password", "ARTIFACTORY_PASSWORD")
				maven = true
			}
			defaults {
				publications("Bintray")
			}
		}
		resolve {
			repoKey = (snapshotBuild ? "libs-snapshot" : "libs-release")
			username = project.resolveProperty("artifactory_user", "ARTIFACTORY_USER")
			password = project.resolveProperty("artifactory_password", "ARTIFACTORY_PASSWORD")
			maven = true
		}
		clientConfig.setIncludeEnvVars(false)
	}

	bintray {
		user = project.resolveProperty("bintrayUser", "BINTRAY_USER")
		key = project.resolveProperty("bintrayKey", "BINTRAY_KEY")
		publications = [ "Bintray" ]
		pkg {
			repo = "maven"
			name = project.name
			licenses = [ projectLicenseId ]
			vcsUrl = projectScmUrl
			version {
				gpg {
					sign = true
					passphrase = project.resolveProperty("bintrayGpgPassphrase", "BINTRAY_GPG_PASSPHRASE")
				}
			}
		}
	}

	eclipse {
		classpath {
			downloadSources = true
			downloadJavadoc = true
			file {
				whenMerged {
					def eeaPath = project.findProperty("eclipse.eeaPath");
					 
					entries.forEach {
						if(it.path.startsWith("org.eclipse.jdt.launching.JRE_CONTAINER")) {
							if(eeaPath != null) {
								it.entryAttributes.put("annotationpath", eeaPath)
							}
						} else if(it.path.contains("/caches/modules-2/")) {
							if(eeaPath != null) {
								it.entryAttributes.put("annotationpath", eeaPath)
							}
						}
					}
				}
			}
		}
	}
}
