apply plugin: 'distribution'

dependencies {
	implementation project(":java-lwjsd-api")
	implementation("javax.ws.rs:javax.ws.rs-api:2.1")
	implementation("org.glassfish.jersey.core:jersey-client:2.26")
	implementation("org.glassfish.jersey.core:jersey-server:2.26")
	implementation("org.glassfish.jersey.containers:jersey-container-grizzly2-http:2.26")
	implementation("org.glassfish.jersey.media:jersey-media-json-jackson:2.26")
	implementation("org.glassfish.jersey.media:jersey-media-multipart:2.26")
	implementation("org.glassfish.jersey.ext:jersey-proxy-client:2.26")
	runtime("org.glassfish.jersey.inject:jersey-hk2:2.26")
	runtime("javax.xml.bind:jaxb-api:2.3.0")
	runtime("javax.activation:activation:1.1.1")
}

jar {
	def buildTimestamp = new java.text.SimpleDateFormat("yyyyMMddHHmmss").format(new Date());
	
	manifest {
		attributes(
			"X-Application-Name": "lwjsd-runtime",
			"X-Application-Version": project.version,
			"X-Application-Build": buildTimestamp
		)
	}
}

task bootJar(type: Jar) {
	appendix = 'boot'
	entryCompression = ZipEntryCompression.STORED
	from jar
	from configurations.runtime.collect {
		it.name.matches('java-boot-.*.jar') ? zipTree(it) : it
	}
	manifest {
		attributes(
			'Main-Class': 'de.carne.boot.Application',
		)
	}
}

distributions {
	main {
		contents {
			from bootJar
		}
	}
}

tasks.withType(Tar){
	compression = Compression.GZIP
	extension = 'tar.gz'
}

task testServiceJar(type: Jar) {
	baseName = project.name + "-test-services"
	version = "0.0.0"
	from sourceSets.test.output
	include "de/carne/lwjsd/runtime/test/services/**/*"
	include "META-INF/services/*"
}

test.dependsOn(testServiceJar)
