apply plugin: "distribution"

dependencies {
	compileOnly(group: "org.eclipse.jdt", name: "org.eclipse.jdt.annotation", version: project.annotationVersion)
	testCompileOnly(group: "org.eclipse.jdt", name: "org.eclipse.jdt.annotation", version: project.annotationVersion)
	implementation project(":java-lwjsd-api")
	implementation(group: "javax.ws.rs", name: "javax.ws.rs-api", version: project.javaxWsRsVersion)
	implementation(group: "org.glassfish.jersey.core", name: "jersey-client", version: project.glassfishJerseyVersion)
	implementation(group: "org.glassfish.jersey.core", name: "jersey-server", version: project.glassfishJerseyVersion)
	implementation(group: "org.glassfish.jersey.containers", name: "jersey-container-grizzly2-http", version: project.glassfishJerseyVersion)
	implementation(group: "org.glassfish.jersey.media", name: "jersey-media-json-jackson", version: project.glassfishJerseyVersion)
	implementation(group: "org.glassfish.jersey.media", name: "jersey-media-multipart", version: project.glassfishJerseyVersion)
	implementation(group: "org.glassfish.jersey.ext", name: "jersey-proxy-client", version: project.glassfishJerseyVersion)
	runtimeOnly(group: "org.glassfish.jersey.inject", name: "jersey-hk2", version: project.glassfishJerseyVersion)
	runtimeOnly(group: "javax.xml.bind", name: "jaxb-api", version: project.javaxXmlBindVersion)
	runtimeOnly(group: "javax.activation", name: "activation", version: project.javaxActivationVersion)
}

jar {
	manifest {
		attributes(
			'Created-By': "Gradle ${gradle.gradleVersion} (${System.properties['os.name']}:${System.properties['os.arch']}:${System.properties['os.version']})",
			'Build-Jdk' : System.properties['java.version'],
			'Build-Timestamp': new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ssZ").format(new Date()),
			'X-Compile-Target-JDK': targetCompatibility,
			'X-Compile-Source-JDK': sourceCompatibility,
			'X-Project-Name': project.name,
			'X-Project-Version': project.version,
			'X-Project-DocURL': projectUrl,
			'X-Project-License': projectLicenseUrl,
			'X-Module-Name': "lwjsd-runtime",
			'X-Module-Version': project.version,
			'X-Module-Build': new java.text.SimpleDateFormat("yyyyMMddHHmmss").format(new Date())
		)
	}
}

task bootJar(type: Jar) {
	appendix = "boot"
	entryCompression = ZipEntryCompression.STORED
	from jar
	from configurations.runtimeClasspath.collect {
		it.name.matches("java-boot-.*.jar") ? zipTree(it) : it
	}
	manifest {
		attributes(
			"Main-Class": "de.carne.boot.Application",
		)
	}
}

distributions {
	main {
		contents {
			from bootJar
		}
	}
}

tasks.withType(Tar){
	compression = Compression.GZIP
	archiveExtension = "tar.gz"
}

task testServiceJar(type: Jar) {
	archiveBaseName = project.name + "-test-services"
	archiveVersion = "0.0.0"
	from sourceSets.test.output
	include "de/carne/lwjsd/runtime/test/services/**/*"
	include "META-INF/services/*"
}

test.dependsOn(testServiceJar)
